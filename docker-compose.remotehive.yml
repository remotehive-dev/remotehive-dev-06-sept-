version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: remotehive-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: remotehive
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-RemoteHive2024!}
      MONGO_INITDB_DATABASE: remotehive
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: remotehive-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-RemoteHive2024!} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Main Backend API
  backend-api:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: remotehive/backend-api:latest
    container_name: remotehive-backend
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://remotehive:${MONGODB_PASSWORD:-RemoteHive2024!}@mongodb:27017/remotehive?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-RemoteHive2024!}@redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Autoscraper Service
  autoscraper:
    build:
      context: ./autoscraper-service
      dockerfile: Dockerfile
    image: remotehive/autoscraper:latest
    container_name: remotehive-autoscraper
    restart: unless-stopped
    environment:
      - DATABASE_URL=sqlite:///./autoscraper.db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-RemoteHive2024!}@redis:6379
      - LOG_LEVEL=INFO
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - autoscraper_data:/app/data
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Admin Panel
  admin-panel:
    build:
      context: ./remotehive-admin
      dockerfile: Dockerfile
    image: remotehive/admin-panel:latest
    container_name: remotehive-admin
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://backend-api:8000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-nextauth-secret-change-in-production}
      - NEXTAUTH_URL=http://localhost:3000
    ports:
      - "3000:3000"
    depends_on:
      backend-api:
        condition: service_healthy
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Public Website
  public-website:
    build:
      context: ./remotehive-public
      dockerfile: Dockerfile
    image: remotehive/public-website:latest
    container_name: remotehive-public
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://backend-api:8000
      - VITE_ENVIRONMENT=production
    ports:
      - "5173:5173"
    depends_on:
      backend-api:
        condition: service_healthy
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Worker
  celery-worker:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: remotehive/backend-api:latest
    container_name: remotehive-celery-worker
    restart: unless-stopped
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - MONGODB_URL=mongodb://remotehive:${MONGODB_PASSWORD:-RemoteHive2024!}@mongodb:27017/remotehive?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-RemoteHive2024!}@redis:6379
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "celery", "-A", "app.tasks.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: remotehive/backend-api:latest
    container_name: remotehive-celery-beat
    restart: unless-stopped
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      - MONGODB_URL=mongodb://remotehive:${MONGODB_PASSWORD:-RemoteHive2024!}@mongodb:27017/remotehive?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-RemoteHive2024!}@redis:6379
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true

  # NGINX Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: remotehive-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend-api
      - admin-panel
      - public-website
    networks:
      - remotehive-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  autoscraper_data:
    driver: local
  celery_beat_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  remotehive-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1