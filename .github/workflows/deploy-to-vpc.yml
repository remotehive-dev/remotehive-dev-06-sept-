name: Deploy RemoteHive to VPC

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          remotehive-admin/package-lock.json
          remotehive-public/package-lock.json
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Admin Panel dependencies
      run: |
        cd remotehive-admin
        npm ci
    
    - name: Install Public Website dependencies
      run: |
        cd remotehive-public
        npm ci
    
    - name: Run Python tests
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
    
    - name: Build Admin Panel
      run: |
        cd remotehive-admin
        npm run build
    
    - name: Build Public Website
      run: |
        cd remotehive-public
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPC_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPC_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to VPC
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.VPC_HOST }} << 'EOF'
          set -e
          
          # Navigate to project directory
          cd /home/ubuntu/RemoteHive || {
            echo "Creating project directory..."
            mkdir -p /home/ubuntu/RemoteHive
            cd /home/ubuntu/RemoteHive
          }
          
          # Clone or pull latest code
          if [ -d ".git" ]; then
            echo "Pulling latest changes..."
            git pull origin ${{ github.ref_name }}
          else
            echo "Cloning repository..."
            git clone -b ${{ github.ref_name }} https://github.com/${{ github.repository }} .
          fi
          
          # Stop existing services
          echo "Stopping existing services..."
          sudo systemctl stop remotehive-backend || true
          sudo systemctl stop remotehive-autoscraper || true
          pm2 stop all || true
          
          # Install Python dependencies
          echo "Installing Python dependencies..."
          python3 -m pip install --user -r requirements.txt
          
          # Install Node.js dependencies and build frontend
          echo "Building Admin Panel..."
          cd remotehive-admin
          npm ci --production
          npm run build
          
          echo "Building Public Website..."
          cd ../remotehive-public
          npm ci --production
          npm run build
          
          cd ..
          
          # Create environment file
          echo "Creating environment file..."
          cat > .env << 'ENVEOF'
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        JWT_ALGORITHM=HS256
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
        REDIS_URL=redis://localhost:6379
        ENVIRONMENT=production
        DEBUG=false
        CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
        SMTP_SERVER=${{ secrets.SMTP_SERVER }}
        SMTP_PORT=${{ secrets.SMTP_PORT }}
        SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
        ENVEOF
          
          # Copy systemd service files
          echo "Setting up systemd services..."
          sudo cp config/systemd/remotehive-backend.service /etc/systemd/system/
          sudo cp config/systemd/remotehive-autoscraper.service /etc/systemd/system/
          sudo systemctl daemon-reload
          
          # Copy PM2 ecosystem file
          echo "Setting up PM2 configuration..."
          cp config/pm2/ecosystem.config.js .
          
          # Copy and setup Nginx configuration
          echo "Setting up Nginx configuration..."
          sudo cp config/nginx/remotehive.conf /etc/nginx/sites-available/
          sudo ln -sf /etc/nginx/sites-available/remotehive.conf /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
          
          # Start services
          echo "Starting backend services..."
          sudo systemctl enable remotehive-backend
          sudo systemctl start remotehive-backend
          
          sudo systemctl enable remotehive-autoscraper
          sudo systemctl start remotehive-autoscraper
          
          # Start frontend services with PM2
          echo "Starting frontend services..."
          pm2 start ecosystem.config.js --env production
          pm2 save
          
          # Health check
          echo "Performing health checks..."
          sleep 10
          
          # Check backend health
          curl -f http://localhost:8000/health || {
            echo "Backend health check failed"
            sudo journalctl -u remotehive-backend --no-pager -n 20
            exit 1
          }
          
          # Check autoscraper health
          curl -f http://localhost:8001/health || {
            echo "Autoscraper health check failed"
            sudo journalctl -u remotehive-autoscraper --no-pager -n 20
            exit 1
          }
          
          # Check frontend services
          pm2 status
          
          echo "Deployment completed successfully!"
        EOF
    
    - name: Verify Deployment
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.VPC_HOST }} << 'EOF'
          echo "=== Service Status ==="
          sudo systemctl status remotehive-backend --no-pager -l
          sudo systemctl status remotehive-autoscraper --no-pager -l
          pm2 status
          
          echo "=== Health Checks ==="
          curl -s http://localhost:8000/health | jq .
          curl -s http://localhost:8001/health | jq .
          
          echo "=== Port Status ==="
          sudo netstat -tlnp | grep -E ':(8000|8001|3000|5173)'
        EOF
    
    - name: Cleanup SSH
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ RemoteHive deployment to VPC completed successfully!"
        echo "🔗 Backend API: http://${{ secrets.VPC_HOST }}:8000"
        echo "🔗 Autoscraper: http://${{ secrets.VPC_HOST }}:8001"
        echo "🔗 Admin Panel: http://${{ secrets.VPC_HOST }}:3000"
        echo "🔗 Public Website: http://${{ secrets.VPC_HOST }}:5173"
    
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ RemoteHive deployment failed!"
        echo "Please check the logs and fix the issues."