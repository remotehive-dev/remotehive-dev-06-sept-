name: Test GitHub to VPC Connection

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'connection'
        type: choice
        options:
          - connection
          - deployment
          - full-pipeline
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      verbose:
        description: 'Enable verbose logging'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  DEPLOY_PATH: '/home/ubuntu/RemoteHive'
  LOG_LEVEL: ${{ inputs.verbose && 'DEBUG' || 'INFO' }}

jobs:
  test-ssh-connection:
    name: Test SSH Connection to VPC
    runs-on: ubuntu-latest
    if: contains(fromJson('["connection", "deployment", "full-pipeline"]'), inputs.test_type)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPC_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPC_HOST }} >> ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to VPC server..."
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }} '
            echo "✅ SSH connection successful!"
            echo "Server info:"
            echo "  Hostname: $(hostname)"
            echo "  User: $(whoami)"
            echo "  OS: $(lsb_release -d | cut -f2)"
            echo "  Uptime: $(uptime -p)"
            echo "  Disk usage: $(df -h / | tail -1 | awk "{print \$5}")"
            echo "  Memory usage: $(free -h | grep Mem | awk "{print \$3\"/\"\$2}")"
          '
          
      - name: Test server prerequisites
        run: |
          echo "Checking server prerequisites..."
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }} '
            echo "Checking installed software:"
            
            # Check Python
            if command -v python3.11 &> /dev/null; then
              echo "  ✅ Python 3.11: $(python3.11 --version)"
            else
              echo "  ❌ Python 3.11: Not installed"
            fi
            
            # Check Node.js
            if command -v node &> /dev/null; then
              echo "  ✅ Node.js: $(node --version)"
            else
              echo "  ❌ Node.js: Not installed"
            fi
            
            # Check PM2
            if command -v pm2 &> /dev/null; then
              echo "  ✅ PM2: $(pm2 --version)"
            else
              echo "  ❌ PM2: Not installed"
            fi
            
            # Check MongoDB
            if systemctl is-active --quiet mongod; then
              echo "  ✅ MongoDB: Running"
            else
              echo "  ❌ MongoDB: Not running"
            fi
            
            # Check Redis
            if systemctl is-active --quiet redis-server; then
              echo "  ✅ Redis: Running"
            else
              echo "  ❌ Redis: Not running"
            fi
            
            # Check Nginx
            if systemctl is-active --quiet nginx; then
              echo "  ✅ Nginx: Running"
            else
              echo "  ❌ Nginx: Not running"
            fi
            
            # Check ports
            echo "Checking port availability:"
            for port in 80 443 3000 5173 8000 8001 6379 27017; do
              if netstat -tlnp | grep -q ":$port "; then
                echo "  ✅ Port $port: In use"
              else
                echo "  ⚠️  Port $port: Available"
              fi
            done
          '

  test-deployment-dry-run:
    name: Test Deployment (Dry Run)
    runs-on: ubuntu-latest
    needs: test-ssh-connection
    if: contains(fromJson('["deployment", "full-pipeline"]'), inputs.test_type)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPC_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPC_HOST }} >> ~/.ssh/known_hosts
          
      - name: Test deployment script transfer
        run: |
          echo "Testing deployment script transfer..."
          
          # Transfer deployment script
          scp -i ~/.ssh/id_rsa scripts/deploy.sh ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }}:/tmp/
          
          # Test script execution (dry run)
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }} '
            chmod +x /tmp/deploy.sh
            echo "Testing deployment script..."
            
            # Test script syntax
            bash -n /tmp/deploy.sh && echo "✅ Deployment script syntax is valid" || echo "❌ Deployment script has syntax errors"
            
            # Test dry run
            export DRY_RUN=true
            /tmp/deploy.sh test || echo "Dry run completed with warnings"
            
            # Cleanup
            rm -f /tmp/deploy.sh
          '
          
      - name: Test environment variables
        run: |
          echo "Testing environment configuration..."
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }} '
            echo "Creating test environment file..."
            cat > /tmp/test.env << EOF
            # Database Configuration
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            REDIS_URL=redis://localhost:6379
            
            # Authentication
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_ALGORITHM=HS256
            JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
            
            # External APIs
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            
            # Email Configuration
            SMTP_SERVER=${{ secrets.SMTP_SERVER }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            
            # Environment
            NODE_ENV=production
            PYTHON_ENV=production
            EOF
            
            echo "✅ Environment file created successfully"
            
            # Test MongoDB connection
            if [ -n "${{ secrets.MONGODB_URL }}" ]; then
              echo "Testing MongoDB connection..."
              python3 -c "
            import pymongo
            try:
                client = pymongo.MongoClient(\"${{ secrets.MONGODB_URL }}\", serverSelectionTimeoutMS=5000)
                client.server_info()
                print(\"✅ MongoDB connection successful\")
            except Exception as e:
                print(f\"❌ MongoDB connection failed: {e}\")
              " 2>/dev/null || echo "⚠️  MongoDB connection test skipped (pymongo not installed)"
            else
              echo "⚠️  MongoDB URL not configured"
            fi
            
            # Cleanup
            rm -f /tmp/test.env
          '

  test-full-pipeline:
    name: Test Full Deployment Pipeline
    runs-on: ubuntu-latest
    needs: [test-ssh-connection, test-deployment-dry-run]
    if: inputs.test_type == 'full-pipeline'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          # Install Python dependencies
          pip install -r requirements.txt
          
          # Install Node.js dependencies for admin panel
          cd remotehive-admin
          npm ci
          cd ..
          
          # Install Node.js dependencies for public website
          cd remotehive-public
          npm ci
          cd ..
          
      - name: Run tests
        run: |
          echo "Running backend tests..."
          python -m pytest tests/ -v --tb=short || echo "⚠️  Some tests failed"
          
          echo "Running frontend tests..."
          cd remotehive-admin
          npm test -- --passWithNoTests || echo "⚠️  Admin panel tests failed"
          cd ..
          
          cd remotehive-public
          npm test -- --passWithNoTests || echo "⚠️  Public website tests failed"
          cd ..
          
      - name: Build applications
        run: |
          echo "Building admin panel..."
          cd remotehive-admin
          npm run build
          cd ..
          
          echo "Building public website..."
          cd remotehive-public
          npm run build
          cd ..
          
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPC_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPC_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to VPC (Test)
        run: |
          echo "Deploying to VPC server..."
          
          # Create deployment package
          tar -czf remotehive-deployment.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='venv' \
            --exclude='env' \
            .
          
          # Transfer deployment package
          scp -i ~/.ssh/id_rsa remotehive-deployment.tar.gz ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }}:/tmp/
          
          # Execute deployment
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }} '
            set -e
            
            echo "Starting deployment..."
            
            # Create backup
            if [ -d "${{ env.DEPLOY_PATH }}" ]; then
              echo "Creating backup..."
              sudo cp -r ${{ env.DEPLOY_PATH }} ${{ env.DEPLOY_PATH }}.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            # Extract new version
            echo "Extracting deployment package..."
            mkdir -p ${{ env.DEPLOY_PATH }}
            cd ${{ env.DEPLOY_PATH }}
            tar -xzf /tmp/remotehive-deployment.tar.gz
            
            # Set permissions
            chown -R ubuntu:ubuntu ${{ env.DEPLOY_PATH }}
            
            # Install Python dependencies
            echo "Installing Python dependencies..."
            python3.11 -m pip install -r requirements.txt
            
            # Install Node.js dependencies and build
            echo "Installing Node.js dependencies..."
            cd remotehive-admin
            npm ci --production
            npm run build
            cd ..
            
            cd remotehive-public
            npm ci --production
            npm run build
            cd ..
            
            # Create environment file
            echo "Creating environment configuration..."
            cat > .env << EOF
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            REDIS_URL=redis://localhost:6379
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_ALGORITHM=HS256
            JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            SMTP_SERVER=${{ secrets.SMTP_SERVER }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            NODE_ENV=production
            PYTHON_ENV=production
            EOF
            
            echo "✅ Deployment completed successfully"
            
            # Cleanup
            rm -f /tmp/remotehive-deployment.tar.gz
          '
          
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }} '
            cd ${{ env.DEPLOY_PATH }}
            
            # Check if files are deployed
            echo "Checking deployed files:"
            [ -f "app/main.py" ] && echo "  ✅ Backend API files" || echo "  ❌ Backend API files missing"
            [ -d "remotehive-admin" ] && echo "  ✅ Admin panel files" || echo "  ❌ Admin panel files missing"
            [ -d "remotehive-public" ] && echo "  ✅ Public website files" || echo "  ❌ Public website files missing"
            [ -d "autoscraper-service" ] && echo "  ✅ Autoscraper service files" || echo "  ❌ Autoscraper service files missing"
            [ -f ".env" ] && echo "  ✅ Environment configuration" || echo "  ❌ Environment configuration missing"
            
            # Test Python imports
            echo "Testing Python imports:"
            cd app
            python3.11 -c "import main; print(\"✅ Backend imports successful\")" || echo "❌ Backend imports failed"
            cd ..
            
            # Test Node.js builds
            echo "Testing Node.js builds:"
            [ -d "remotehive-admin/.next" ] && echo "  ✅ Admin panel build" || echo "  ❌ Admin panel build missing"
            [ -d "remotehive-public/dist" ] && echo "  ✅ Public website build" || echo "  ❌ Public website build missing"
            
            echo "✅ Deployment verification completed"
          '

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test-ssh-connection, test-deployment-dry-run, test-full-pipeline]
    if: always()
    
    steps:
      - name: Generate test report
        run: |
          echo "# GitHub to VPC Connection Test Report" > test-report.md
          echo "" >> test-report.md
          echo "**Date:** $(date)" >> test-report.md
          echo "**Test Type:** ${{ inputs.test_type }}" >> test-report.md
          echo "**Environment:** ${{ inputs.environment }}" >> test-report.md
          echo "" >> test-report.md
          
          echo "## Test Results" >> test-report.md
          echo "" >> test-report.md
          
          # SSH Connection Test
          if [ "${{ needs.test-ssh-connection.result }}" == "success" ]; then
            echo "- ✅ SSH Connection: PASSED" >> test-report.md
          else
            echo "- ❌ SSH Connection: FAILED" >> test-report.md
          fi
          
          # Deployment Dry Run Test
          if [ "${{ needs.test-deployment-dry-run.result }}" == "success" ]; then
            echo "- ✅ Deployment Dry Run: PASSED" >> test-report.md
          elif [ "${{ needs.test-deployment-dry-run.result }}" == "skipped" ]; then
            echo "- ⏭️ Deployment Dry Run: SKIPPED" >> test-report.md
          else
            echo "- ❌ Deployment Dry Run: FAILED" >> test-report.md
          fi
          
          # Full Pipeline Test
          if [ "${{ needs.test-full-pipeline.result }}" == "success" ]; then
            echo "- ✅ Full Pipeline: PASSED" >> test-report.md
          elif [ "${{ needs.test-full-pipeline.result }}" == "skipped" ]; then
            echo "- ⏭️ Full Pipeline: SKIPPED" >> test-report.md
          else
            echo "- ❌ Full Pipeline: FAILED" >> test-report.md
          fi
          
          echo "" >> test-report.md
          echo "## Next Steps" >> test-report.md
          echo "" >> test-report.md
          
          if [ "${{ needs.test-ssh-connection.result }}" == "success" ] && [ "${{ needs.test-deployment-dry-run.result }}" == "success" ]; then
            echo "✅ **Connection and deployment tests passed!**" >> test-report.md
            echo "" >> test-report.md
            echo "You can now:" >> test-report.md
            echo "1. Set up automated deployment workflows" >> test-report.md
            echo "2. Configure production environment variables" >> test-report.md
            echo "3. Enable SSL certificates" >> test-report.md
            echo "4. Set up monitoring and alerting" >> test-report.md
          else
            echo "❌ **Some tests failed. Please review the logs and fix issues before proceeding.**" >> test-report.md
            echo "" >> test-report.md
            echo "Common issues to check:" >> test-report.md
            echo "1. SSH key configuration" >> test-report.md
            echo "2. Server prerequisites installation" >> test-report.md
            echo "3. Network connectivity" >> test-report.md
            echo "4. Environment variables configuration" >> test-report.md
          fi
          
          echo "" >> test-report.md
          echo "---" >> test-report.md
          echo "*Generated by GitHub Actions*" >> test-report.md
          
          # Display report
          cat test-report.md
          
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: connection-test-report
          path: test-report.md
          retention-days: 30