name: RemoteHive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, autoscraper, admin, public]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python (Backend/Autoscraper)
      if: matrix.service == 'backend' || matrix.service == 'autoscraper'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js (Frontend)
      if: matrix.service == 'admin' || matrix.service == 'public'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Python dependencies
      if: matrix.service == 'backend' || matrix.service == 'autoscraper'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Install Node.js dependencies (Admin)
      if: matrix.service == 'admin'
      working-directory: ./remotehive-admin
      run: npm ci
    
    - name: Install Node.js dependencies (Public)
      if: matrix.service == 'public'
      working-directory: ./remotehive-public
      run: npm ci
    
    - name: Run Backend Tests
      if: matrix.service == 'backend'
      run: |
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Run Autoscraper Tests
      if: matrix.service == 'autoscraper'
      working-directory: ./autoscraper-service
      run: |
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Run Admin Tests
      if: matrix.service == 'admin'
      working-directory: ./remotehive-admin
      run: |
        npm run test:ci
    
    - name: Run Public Tests
      if: matrix.service == 'public'
      working-directory: ./remotehive-public
      run: |
        npm run test:ci
    
    - name: Upload coverage reports
      if: matrix.service == 'backend' || matrix.service == 'autoscraper'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r app/ autoscraper-service/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service: 
          - name: backend
            dockerfile: Dockerfile.backend
            context: ./app
          - name: autoscraper
            dockerfile: Dockerfile
            context: ./autoscraper-service
          - name: admin
            dockerfile: Dockerfile.admin
            context: ./remotehive-admin
          - name: public
            dockerfile: Dockerfile.public
            context: ./remotehive-public
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Deploy to Kubernetes
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|remotehive/backend-api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}|g" k8s-remotehive.yaml
        sed -i "s|remotehive/autoscraper:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/autoscraper:${{ github.sha }}|g" k8s-remotehive.yaml
        sed -i "s|remotehive/admin-panel:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}|g" k8s-remotehive.yaml
        sed -i "s|remotehive/public-website:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/public:${{ github.sha }}|g" k8s-remotehive.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s-remotehive.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/backend-api -n remotehive --timeout=600s
        kubectl rollout status deployment/autoscraper -n remotehive --timeout=600s
        kubectl rollout status deployment/admin-panel -n remotehive --timeout=600s
        kubectl rollout status deployment/public-website -n remotehive --timeout=600s
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=backend-api -n remotehive --timeout=300s
        kubectl wait --for=condition=ready pod -l app=autoscraper -n remotehive --timeout=300s
        
        # Get service URLs
        BACKEND_URL=$(kubectl get svc backend-api -n remotehive -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run basic health checks
        curl -f http://$BACKEND_URL:8000/health || exit 1
        curl -f http://$BACKEND_URL:8001/health || exit 1
    
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Deploy to Production Kubernetes
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|remotehive/backend-api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}|g" k8s-remotehive.yaml
        sed -i "s|remotehive/autoscraper:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/autoscraper:${{ github.sha }}|g" k8s-remotehive.yaml
        sed -i "s|remotehive/admin-panel:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}|g" k8s-remotehive.yaml
        sed -i "s|remotehive/public-website:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/public:${{ github.sha }}|g" k8s-remotehive.yaml
        
        # Apply Kubernetes manifests with rolling update strategy
        kubectl apply -f k8s-remotehive.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/backend-api -n remotehive --timeout=600s
        kubectl rollout status deployment/autoscraper -n remotehive --timeout=600s
        kubectl rollout status deployment/admin-panel -n remotehive --timeout=600s
        kubectl rollout status deployment/public-website -n remotehive --timeout=600s
    
    - name: Run production health checks
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=backend-api -n remotehive --timeout=300s
        kubectl wait --for=condition=ready pod -l app=autoscraper -n remotehive --timeout=300s
        
        # Get service URLs
        BACKEND_URL=$(kubectl get svc nginx-proxy -n remotehive -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run comprehensive health checks
        curl -f http://$BACKEND_URL/api/health || exit 1
        curl -f http://$BACKEND_URL/autoscraper/health || exit 1
        curl -f http://$BACKEND_URL/admin/ || exit 1
        curl -f http://$BACKEND_URL/ || exit 1
    
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          ${{ github.event.head_commit.message }}
          
          ## Docker Images
          - Backend API: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}`
          - Autoscraper: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/autoscraper:${{ github.sha }}`
          - Admin Panel: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}`
          - Public Website: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/public:${{ github.sha }}`
        draft: false
        prerelease: false
    
    - name: Notify production deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "Production Deployment ${{ job.status }}",
            "attachments": [{
              "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
              "fields": [{
                "title": "Repository",
                "value": "${{ github.repository }}",
                "short": true
              }, {
                "title": "Commit",
                "value": "${{ github.sha }}",
                "short": true
              }]
            }]
          }

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: '${{ env.IMAGE_NAME }}/backend'
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true