name: Test and Build

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ feature/*, bugfix/*, hotfix/* ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Python linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          
      - name: Python code formatting check
        run: |
          echo "üîç Checking Python code formatting..."
          black --check --diff app/ tests/ || {
            echo "‚ùå Python code formatting issues found. Run 'black app/ tests/' to fix."
            exit 1
          }
          
      - name: Python import sorting check
        run: |
          echo "üîç Checking Python import sorting..."
          isort --check-only --diff app/ tests/ || {
            echo "‚ùå Python import sorting issues found. Run 'isort app/ tests/' to fix."
            exit 1
          }
          
      - name: Python linting
        run: |
          echo "üîç Running Python linting..."
          flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
          
      - name: Python type checking
        run: |
          echo "üîç Running Python type checking..."
          mypy app/ --ignore-missing-imports || true
          
      - name: Frontend code quality - Admin Panel
        run: |
          cd remotehive-admin
          npm ci
          echo "üîç Running Admin Panel linting..."
          npm run lint
          echo "üîç Running Admin Panel type checking..."
          npm run type-check || true
          
      - name: Frontend code quality - Public Website
        run: |
          cd remotehive-public
          npm ci
          echo "üîç Running Public Website linting..."
          npm run lint
          echo "üîç Running Public Website type checking..."
          npm run type-check || true

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock httpx
          
      - name: Run unit tests
        run: |
          echo "üß™ Running Python unit tests..."
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term --cov-fail-under=70
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.9'
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpassword
          MONGO_INITDB_DATABASE: testdb
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
          
      - name: Set up test environment
        run: |
          export MONGODB_URL="mongodb://testuser:testpassword@localhost:27017/testdb"
          export REDIS_URL="redis://localhost:6379"
          export ENVIRONMENT="test"
          
      - name: Run integration tests
        env:
          MONGODB_URL: mongodb://testuser:testpassword@localhost:27017/testdb
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
        run: |
          echo "üß™ Running integration tests..."
          if [ -d "tests/integration" ]; then
            pytest tests/integration/ -v --tb=short
          else
            echo "‚ÑπÔ∏è No integration tests found, skipping..."
          fi

  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ['remotehive-admin', 'remotehive-public']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache Node dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.app }}-${{ hashFiles(format('{0}/package-lock.json', matrix.app)) }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.app }}-
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: |
          cd ${{ matrix.app }}
          npm ci
          
      - name: Run tests
        run: |
          cd ${{ matrix.app }}
          echo "üß™ Running ${{ matrix.app }} tests..."
          npm run test -- --coverage --watchAll=false || true
          
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.app }}/coverage/lcov.info
          flags: ${{ matrix.app }}
          name: ${{ matrix.app }}-coverage
          fail_ci_if_error: false

  build-tests:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Test Python application startup
        run: |
          echo "üöÄ Testing Python application startup..."
          timeout 30s python -c "from app.main import app; print('‚úÖ Backend application imports successfully')" || {
            echo "‚ùå Backend application failed to import"
            exit 1
          }
          
      - name: Build Admin Panel
        run: |
          cd remotehive-admin
          npm ci
          echo "üèóÔ∏è Building Admin Panel..."
          npm run build
          echo "‚úÖ Admin Panel build successful"
          
      - name: Build Public Website
        run: |
          cd remotehive-public
          npm ci
          echo "üèóÔ∏è Building Public Website..."
          npm run build
          echo "‚úÖ Public Website build successful"
          
      - name: Test Autoscraper Service
        run: |
          cd autoscraper-service
          echo "üß™ Testing Autoscraper Service..."
          python -c "import sys; sys.path.append('.'); from main import app; print('‚úÖ Autoscraper service imports successfully')" || {
            echo "‚ùå Autoscraper service failed to import"
            exit 1
          }
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            remotehive-admin/dist/
            remotehive-public/dist/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security scanning tools
        run: |
          pip install safety bandit semgrep
          npm install -g audit-ci
          
      - name: Python dependency security scan
        run: |
          echo "üîí Scanning Python dependencies for vulnerabilities..."
          safety check -r requirements.txt --json --output safety-report.json || {
            echo "‚ö†Ô∏è Security vulnerabilities found in Python dependencies"
            cat safety-report.json
          }
          
      - name: Python code security analysis
        run: |
          echo "üîí Running Python security analysis..."
          bandit -r app/ -f json -o bandit-report.json || {
            echo "‚ö†Ô∏è Security issues found in Python code"
            cat bandit-report.json
          }
          
      - name: Frontend dependency security scan
        run: |
          echo "üîí Scanning frontend dependencies..."
          
          # Admin Panel
          cd remotehive-admin
          npm audit --audit-level=high || echo "‚ö†Ô∏è Security issues in Admin Panel dependencies"
          
          # Public Website
          cd ../remotehive-public
          npm audit --audit-level=high || echo "‚ö†Ô∏è Security issues in Public Website dependencies"
          
      - name: Multi-language security scan
        run: |
          echo "üîí Running comprehensive security scan..."
          semgrep --config=auto . --json --output=semgrep-report.json || {
            echo "‚ö†Ô∏è Security patterns detected"
            cat semgrep-report.json
          }
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json
          retention-days: 30

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install performance testing tools
        run: |
          pip install locust pytest-benchmark
          
      - name: Run performance tests
        run: |
          echo "‚ö° Running performance tests..."
          if [ -d "tests/performance" ]; then
            pytest tests/performance/ -v --benchmark-only
          else
            echo "‚ÑπÔ∏è No performance tests found, skipping..."
          fi

  pr-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, frontend-tests, build-tests, security-scan]
    if: github.event_name == 'pull_request'
    steps:
      - name: Generate PR Summary
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const summary = `## üöÄ RemoteHive PR Test Summary
            
            **Pull Request:** ${pr.title}
            **Branch:** \`${pr.head.ref}\` ‚Üí \`${pr.base.ref}\`
            **Author:** @${pr.user.login}
            
            ### ‚úÖ Test Results
            - **Code Quality:** Passed
            - **Unit Tests:** Passed
            - **Integration Tests:** Passed
            - **Frontend Tests:** Passed
            - **Build Tests:** Passed
            - **Security Scan:** Completed
            
            ### üìä Coverage Reports
            Coverage reports have been uploaded to Codecov.
            
            ### üîí Security
            Security scans completed. Check artifacts for detailed reports.
            
            ### üèóÔ∏è Build Artifacts
            Build artifacts are available for download and testing.
            
            ---
            *This summary was automatically generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });