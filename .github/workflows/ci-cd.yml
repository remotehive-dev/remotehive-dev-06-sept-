name: RemoteHive CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: remotehive
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20.x'

jobs:
  # =============================================================================
  # CODE QUALITY AND TESTING
  # =============================================================================
  
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run code formatting check (Black)
        run: black --check --diff .
      
      - name: Run import sorting check (isort)
        run: isort --check-only --diff .
      
      - name: Run linting (flake8)
        run: flake8 .
      
      - name: Run security check (bandit)
        run: bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: bandit-report.json
  
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
      
      - name: Set up test environment
        run: |
          cp .env.example .env.test
          echo "MONGODB_URL=mongodb://admin:password@localhost:27017/remotehive_test?authSource=admin" >> .env.test
          echo "REDIS_URL=redis://localhost:6379/1" >> .env.test
          echo "ENVIRONMENT=test" >> .env.test
      
      - name: Run backend tests
        env:
          MONGODB_URL: mongodb://admin:password@localhost:27017/remotehive_test?authSource=admin
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: test
        run: |
          python -m pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=html
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            htmlcov/
            coverage.xml
  
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        app: [admin, public]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'remotehive-${{ matrix.app }}/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./remotehive-${{ matrix.app }}
        run: npm ci
      
      - name: Run type checking
        working-directory: ./remotehive-${{ matrix.app }}
        run: npm run type-check
      
      - name: Run linting
        working-directory: ./remotehive-${{ matrix.app }}
        run: npm run lint
      
      - name: Run tests
        working-directory: ./remotehive-${{ matrix.app }}
        run: npm test -- --coverage --watchAll=false
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./remotehive-${{ matrix.app }}/coverage/lcov.info
          flags: frontend-${{ matrix.app }}
          name: ${{ matrix.app }}-coverage
      
      - name: Build application
        working-directory: ./remotehive-${{ matrix.app }}
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: ./remotehive-${{ matrix.app }}/dist
  
  # =============================================================================
  # DOCKER BUILD AND PUSH
  # =============================================================================
  
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    strategy:
      matrix:
        service: [backend, autoscraper, admin, public]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'backend' && 'Dockerfile.prod' || format('remotehive-{0}/Dockerfile', matrix.service) }}
          target: ${{ matrix.service == 'backend' && 'production' || '' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
  
  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [backend, autoscraper, admin, public]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
  
  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: development
      url: https://dev.remotehive.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Development
        run: |
          echo "Deploying to development environment..."
          # Add your development deployment logic here
          # This could be Docker Compose or a development Kubernetes cluster
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.remotehive.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to Staging
        env:
          KUBECONFIG: kubeconfig
        run: |
          chmod +x k8s/deploy-k8s.sh
          ./k8s/deploy-k8s.sh deploy \
            --environment staging \
            --namespace remotehive-staging \
            --registry ${{ env.REGISTRY }}/${{ github.repository_owner }}/ \
            --tag ${{ github.sha }} \
            --domain staging.remotehive.com \
            --skip-build \
            --skip-tests
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://remotehive.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to Production
        env:
          KUBECONFIG: kubeconfig
        run: |
          chmod +x k8s/deploy-k8s.sh
          ./k8s/deploy-k8s.sh deploy \
            --environment production \
            --namespace remotehive-prod \
            --registry ${{ env.REGISTRY }}/${{ github.repository_owner }}/ \
            --tag ${{ github.sha }} \
            --domain remotehive.com \
            --skip-build \
            --skip-tests
      
      - name: Run smoke tests
        run: |
          # Add smoke tests for production deployment
          echo "Running smoke tests..."
          # curl -f https://remotehive.com/health || exit 1
  
  # =============================================================================
  # MANUAL DEPLOYMENT
  # =============================================================================
  
  manual-deploy:
    name: Manual Deployment
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          else
            echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          fi
          export KUBECONFIG=kubeconfig
      
      - name: Deploy
        env:
          KUBECONFIG: kubeconfig
        run: |
          chmod +x k8s/deploy-k8s.sh
          ./k8s/deploy-k8s.sh deploy \
            --environment ${{ github.event.inputs.environment }} \
            --namespace remotehive-${{ github.event.inputs.environment }} \
            --registry ${{ env.REGISTRY }}/${{ github.repository_owner }}/ \
            --tag ${{ github.sha }} \
            --skip-build \
            ${{ github.event.inputs.skip_tests == 'true' && '--skip-tests' || '' }}
  
  # =============================================================================
  # CLEANUP
  # =============================================================================
  
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production, manual-deploy]
    if: always()
    
    steps:
      - name: Clean up artifacts
        run: |
          echo "Cleaning up temporary artifacts..."
          # Add cleanup logic here if needed
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          remotehive-admin/package-lock.json
          remotehive-public/package-lock.json
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Install Node.js dependencies (Admin Panel)
      working-directory: ./remotehive-admin
      run: |
        npm ci
    
    - name: Install Node.js dependencies (Public Website)
      working-directory: ./remotehive-public
      run: |
        npm ci
    
    - name: Run Python linting (flake8)
      run: |
        flake8 app/ autoscraper-service/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ autoscraper-service/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Python type checking (mypy)
      run: |
        mypy app/ --ignore-missing-imports
    
    - name: Run Python security check (bandit)
      run: |
        bandit -r app/ autoscraper-service/ -f json -o bandit-report.json || true
    
    - name: Run Python tests
      env:
        MONGODB_URL: mongodb://admin:password123@localhost:27017/remotehive_test?authSource=admin
        REDIS_URL: redis://localhost:6379/1
        JWT_SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: testing
      run: |
        pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Run Autoscraper tests
      working-directory: ./autoscraper-service
      env:
        REDIS_URL: redis://localhost:6379/2
        ENVIRONMENT: testing
      run: |
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Run TypeScript type checking (Admin Panel)
      working-directory: ./remotehive-admin
      run: |
        npm run type-check
    
    - name: Run TypeScript type checking (Public Website)
      working-directory: ./remotehive-public
      run: |
        npm run type-check
    
    - name: Run ESLint (Admin Panel)
      working-directory: ./remotehive-admin
      run: |
        npm run lint
    
    - name: Run ESLint (Public Website)
      working-directory: ./remotehive-public
      run: |
        npm run lint
    
    - name: Run Frontend tests (Admin Panel)
      working-directory: ./remotehive-admin
      run: |
        npm run test:ci
    
    - name: Run Frontend tests (Public Website)
      working-directory: ./remotehive-public
      run: |
        npm run test:ci
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml,./autoscraper-service/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.node-version }}
        path: |
          htmlcov/
          bandit-report.json
          pytest-report.xml

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=high

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [backend-api, autoscraper-service, admin-panel, public-website]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.remotehive.in
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      env:
        KUBECONFIG: kubeconfig
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update image tags in manifests
        sed -i "s|image: .*backend-api.*|image: ${{ env.REGISTRY }}/${{ github.repository }}/backend-api:${IMAGE_TAG}|g" k8s/backend-api.yaml
        sed -i "s|image: .*autoscraper-service.*|image: ${{ env.REGISTRY }}/${{ github.repository }}/autoscraper-service:${IMAGE_TAG}|g" k8s/autoscraper-service.yaml
        sed -i "s|image: .*admin-panel.*|image: ${{ env.REGISTRY }}/${{ github.repository }}/admin-panel:${IMAGE_TAG}|g" k8s/admin-panel.yaml
        sed -i "s|image: .*public-website.*|image: ${{ env.REGISTRY }}/${{ github.repository }}/public-website:${IMAGE_TAG}|g" k8s/public-website.yaml
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/persistent-volumes.yaml
        kubectl apply -f k8s/configmaps-secrets.yaml
        kubectl apply -f k8s/mongodb.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/backend-api.yaml
        kubectl apply -f k8s/autoscraper-service.yaml
        kubectl apply -f k8s/admin-panel.yaml
        kubectl apply -f k8s/public-website.yaml
        kubectl apply -f k8s/celery-workers.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/monitoring.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/backend-api -n remotehive --timeout=600s
        kubectl rollout status deployment/autoscraper-service -n remotehive --timeout=600s
        kubectl rollout status deployment/admin-panel -n remotehive --timeout=600s
        kubectl rollout status deployment/public-website -n remotehive --timeout=600s
    
    - name: Run smoke tests
      env:
        KUBECONFIG: kubeconfig
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/backend-api -n remotehive
        kubectl wait --for=condition=available --timeout=300s deployment/admin-panel -n remotehive
        kubectl wait --for=condition=available --timeout=300s deployment/public-website -n remotehive
        
        # Run health checks
        kubectl exec -n remotehive deployment/backend-api -- curl -f http://localhost:8000/health
        kubectl exec -n remotehive deployment/admin-panel -- curl -f http://localhost:3000/api/health
    
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://remotehive.in
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to production
      env:
        KUBECONFIG: kubeconfig
        IMAGE_TAG: ${{ github.event.release.tag_name }}
      run: |
        # Update image tags in manifests
        sed -i "s|image: .*backend-api.*|image: ${{ env.REGISTRY }}/${{ github.repository }}/backend-api:${IMAGE_TAG}|g" k8s/backend-api.yaml
        sed -i "s|image: .*autoscraper-service.*|image: ${{ env.REGISTRY }}/${{ github.repository }}/autoscraper-service:${IMAGE_TAG}|g" k8s/autoscraper-service.yaml
        sed -i "s|image: .*admin-panel.*|image: ${{ env.REGISTRY }}/${{ github.repository }}/admin-panel:${IMAGE_TAG}|g" k8s/admin-panel.yaml
        sed -i "s|image: .*public-website.*|image: ${{ env.REGISTRY }}/${{ github.repository }}/public-website:${IMAGE_TAG}|g" k8s/public-website.yaml
        
        # Apply manifests with rolling update strategy
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/persistent-volumes.yaml
        kubectl apply -f k8s/configmaps-secrets.yaml
        kubectl apply -f k8s/mongodb.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/backend-api.yaml
        kubectl apply -f k8s/autoscraper-service.yaml
        kubectl apply -f k8s/admin-panel.yaml
        kubectl apply -f k8s/public-website.yaml
        kubectl apply -f k8s/celery-workers.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/monitoring.yaml
        
        # Wait for rollout with longer timeout for production
        kubectl rollout status deployment/backend-api -n remotehive --timeout=900s
        kubectl rollout status deployment/autoscraper-service -n remotehive --timeout=900s
        kubectl rollout status deployment/admin-panel -n remotehive --timeout=900s
        kubectl rollout status deployment/public-website -n remotehive --timeout=900s
    
    - name: Run production smoke tests
      env:
        KUBECONFIG: kubeconfig
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/backend-api -n remotehive
        kubectl wait --for=condition=available --timeout=600s deployment/admin-panel -n remotehive
        kubectl wait --for=condition=available --timeout=600s deployment/public-website -n remotehive
        
        # Run comprehensive health checks
        kubectl exec -n remotehive deployment/backend-api -- curl -f http://localhost:8000/health
        kubectl exec -n remotehive deployment/admin-panel -- curl -f http://localhost:3000/api/health
        
        # Test external endpoints
        curl -f https://api.remotehive.in/health
        curl -f https://admin.remotehive.in/api/health
        curl -f https://remotehive.in/health
    
    - name: Create deployment record
      run: |
        echo "Deployment completed successfully" > deployment-record.txt
        echo "Version: ${{ github.event.release.tag_name }}" >> deployment-record.txt
        echo "Commit: ${{ github.sha }}" >> deployment-record.txt
        echo "Deployed at: $(date -u)" >> deployment-record.txt
    
    - name: Upload deployment record
      uses: actions/upload-artifact@v3
      with:
        name: production-deployment-${{ github.event.release.tag_name }}
        path: deployment-record.txt
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#production-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "Production Deployment ${{ job.status }}",
            "attachments": [{
              "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
              "fields": [{
                "title": "Version",
                "value": "${{ github.event.release.tag_name }}",
                "short": true
              }, {
                "title": "Environment",
                "value": "Production",
                "short": true
              }]
            }]
          }

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'remotehive/backend-api'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
    
    - name: Delete old autoscraper images
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'remotehive/autoscraper-service'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
    
    - name: Delete old admin panel images
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'remotehive/admin-panel'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
    
    - name: Delete old public website images
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'remotehive/public-website'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true