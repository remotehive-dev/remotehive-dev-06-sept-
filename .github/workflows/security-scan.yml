name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - secrets

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Python security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          
      - name: Python dependency vulnerability scan
        run: |
          echo "🔒 Scanning Python dependencies for known vulnerabilities..."
          
          # Safety check
          safety check -r requirements.txt --json --output safety-report.json || {
            echo "⚠️ Safety found vulnerabilities in Python dependencies"
            safety check -r requirements.txt --short-report
          }
          
      - name: Run Snyk to check for vulnerabilities
        if: ${{ secrets.SNYK_TOKEN != '' }}
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true
          
          # Pip-audit check
          pip-audit -r requirements.txt --format=json --output=pip-audit-report.json || {
            echo "⚠️ Pip-audit found vulnerabilities in Python dependencies"
            pip-audit -r requirements.txt
          }
          
      - name: Node.js dependency vulnerability scan - Admin Panel
        run: |
          echo "🔒 Scanning Admin Panel dependencies..."
          cd remotehive-admin
          
          # Install dependencies
          npm ci
          
          # Run npm audit
          npm audit --audit-level=moderate --json > ../admin-audit-report.json || {
            echo "⚠️ Vulnerabilities found in Admin Panel dependencies"
            npm audit --audit-level=moderate
          }
          
          # Check for high/critical vulnerabilities
          if npm audit --audit-level=high; then
            echo "✅ No high/critical vulnerabilities in Admin Panel"
          else
            echo "❌ High/critical vulnerabilities found in Admin Panel"
            exit 1
          fi
          
      - name: Node.js dependency vulnerability scan - Public Website
        run: |
          echo "🔒 Scanning Public Website dependencies..."
          cd remotehive-public
          
          # Install dependencies
          npm ci
          
          # Run npm audit
          npm audit --audit-level=moderate --json > ../public-audit-report.json || {
            echo "⚠️ Vulnerabilities found in Public Website dependencies"
            npm audit --audit-level=moderate
          }
          
          # Check for high/critical vulnerabilities
          if npm audit --audit-level=high; then
            echo "✅ No high/critical vulnerabilities in Public Website"
          else
            echo "❌ High/critical vulnerabilities found in Public Website"
            exit 1
          fi
          
      - name: Generate dependency scan summary
        run: |
          echo "📊 Dependency Scan Summary" > dependency-scan-summary.md
          echo "========================" >> dependency-scan-summary.md
          echo "" >> dependency-scan-summary.md
          
          # Python dependencies
          echo "## Python Dependencies" >> dependency-scan-summary.md
          if [ -f "safety-report.json" ]; then
            echo "- Safety scan completed" >> dependency-scan-summary.md
          fi
          if [ -f "pip-audit-report.json" ]; then
            echo "- Pip-audit scan completed" >> dependency-scan-summary.md
          fi
          echo "" >> dependency-scan-summary.md
          
          # Node.js dependencies
          echo "## Node.js Dependencies" >> dependency-scan-summary.md
          if [ -f "admin-audit-report.json" ]; then
            echo "- Admin Panel audit completed" >> dependency-scan-summary.md
          fi
          if [ -f "public-audit-report.json" ]; then
            echo "- Public Website audit completed" >> dependency-scan-summary.md
          fi
          
          cat dependency-scan-summary.md
          
      - name: Upload dependency scan reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-reports
          path: |
            safety-report.json
            pip-audit-report.json
            admin-audit-report.json
            public-audit-report.json
            dependency-scan-summary.md
          retention-days: 30

  code-security-scan:
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install code security tools
        run: |
          pip install bandit safety pip-audit || echo "Failed to install some Python security tools"
          npm install -g audit-ci || echo "Failed to install audit-ci"
          # Install semgrep if available
          pip install semgrep || echo "Semgrep not available, skipping"
        continue-on-error: true
          
      - name: Python static security analysis
        run: |
          echo "🔒 Running Python static security analysis..."
          
          # Bandit security linter
          if command -v bandit &> /dev/null; then
            bandit -r app/ autoscraper-service/ -f json -o bandit-report.json || {
              echo "⚠️ Bandit found security issues in Python code"
              bandit -r app/ autoscraper-service/ -f txt
            }
            
            # Generate readable report
            bandit -r app/ autoscraper-service/ -f txt -o bandit-readable-report.txt || true
          else
            echo "Bandit not available, skipping"
          fi
        continue-on-error: true
          
      - name: Multi-language security pattern scan
        run: |
          echo "🔒 Running multi-language security pattern scan..."
          
          # Semgrep security rules
          semgrep --config=auto . --json --output=semgrep-report.json || {
            echo "⚠️ Semgrep found security patterns"
            semgrep --config=auto . --text
          }
          
          # Semgrep OWASP Top 10 rules
          semgrep --config=p/owasp-top-ten . --json --output=semgrep-owasp-report.json || {
            echo "⚠️ OWASP security patterns detected"
            semgrep --config=p/owasp-top-ten . --text
          }
          
      - name: JavaScript/TypeScript security scan
        run: |
          echo "🔒 Scanning JavaScript/TypeScript code for security issues..."
          
          # Admin Panel security scan
          cd remotehive-admin
          if [ -f "package.json" ]; then
            npm ci
            # Run ESLint with security plugin if configured
            npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ../admin-eslint-security.json || {
              echo "⚠️ ESLint security issues found in Admin Panel"
            }
          fi
          
          cd ../remotehive-public
          if [ -f "package.json" ]; then
            npm ci
            # Run ESLint with security plugin if configured
            npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ../public-eslint-security.json || {
              echo "⚠️ ESLint security issues found in Public Website"
            }
          fi
          
      - name: Check for hardcoded secrets patterns
        run: |
          echo "🔒 Checking for potential hardcoded secrets..."
          
          # Common secret patterns
          SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]+['\"]" 
            "secret\s*=\s*['\"][^'\"]+['\"]" 
            "key\s*=\s*['\"][^'\"]+['\"]" 
            "token\s*=\s*['\"][^'\"]+['\"]" 
            "api_key\s*=\s*['\"][^'\"]+['\"]" 
            "private_key" 
            "-----BEGIN.*PRIVATE KEY-----" 
            "sk-[a-zA-Z0-9]{32,}" 
            "pk_[a-zA-Z0-9]{32,}" 
          )
          
          echo "Scanning for secret patterns..." > secret-patterns-report.txt
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            echo "Checking pattern: $pattern" >> secret-patterns-report.txt
            if grep -r -i -E "$pattern" --include="*.py" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git .; then
              echo "⚠️ Potential secret pattern found: $pattern" >> secret-patterns-report.txt
            fi
          done
          
          cat secret-patterns-report.txt
          
      - name: Generate code security summary
        run: |
          echo "📊 Code Security Scan Summary" > code-security-summary.md
          echo "============================" >> code-security-summary.md
          echo "" >> code-security-summary.md
          
          # Bandit results
          if [ -f "bandit-report.json" ]; then
            echo "## Python Security Analysis (Bandit)" >> code-security-summary.md
            python -c "
          import json
          try:
              with open('bandit-report.json') as f:
                  data = json.load(f)
                  print(f'- Issues found: {len(data.get(\"results\", []))}')
                  print(f'- Confidence levels: {set([r.get(\"issue_confidence\") for r in data.get(\"results\", [])])}')
          except:
              print('- Bandit scan completed')
          " >> code-security-summary.md
            echo "" >> code-security-summary.md
          fi
          
          # Semgrep results
          if [ -f "semgrep-report.json" ]; then
            echo "## Multi-language Security Patterns (Semgrep)" >> code-security-summary.md
            python -c "
          import json
          try:
              with open('semgrep-report.json') as f:
                  data = json.load(f)
                  print(f'- Findings: {len(data.get(\"results\", []))}')
          except:
              print('- Semgrep scan completed')
          " >> code-security-summary.md
            echo "" >> code-security-summary.md
          fi
          
          # Secret patterns
          if [ -f "secret-patterns-report.txt" ]; then
            echo "## Secret Pattern Detection" >> code-security-summary.md
            echo "- Secret pattern scan completed" >> code-security-summary.md
            echo "" >> code-security-summary.md
          fi
          
          cat code-security-summary.md
          
      - name: Upload code security reports
        uses: actions/upload-artifact@v3
        with:
          name: code-security-reports
          path: |
            bandit-report.json
            bandit-readable-report.txt
            semgrep-report.json
            semgrep-owasp-report.json
            admin-eslint-security.json
            public-eslint-security.json
            secret-patterns-report.txt
            code-security-summary.md
          retention-days: 30

  secrets-scan:
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
          
      - name: Install secret scanning tools
        run: |
          # Install gitleaks for secret detection
          wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/
          
      - name: Run gitleaks secret scan
        run: |
          echo "🔒 Scanning for secrets in git history..."
          
          # Scan current files
          gitleaks detect --source . --report-format json --report-path gitleaks-current-report.json || {
            echo "⚠️ Gitleaks found potential secrets in current files"
            gitleaks detect --source . --report-format sarif --report-path gitleaks-current-report.sarif
          }
          
          # Scan git history
          gitleaks detect --source . --log-opts="--all" --report-format json --report-path gitleaks-history-report.json || {
            echo "⚠️ Gitleaks found potential secrets in git history"
          }
          
      - name: Custom secret pattern scan
        run: |
          echo "🔒 Running custom secret pattern scan..."
          
          # Create custom patterns file
          cat > custom-secret-patterns.txt << 'EOF'
          # API Keys
          [a-zA-Z0-9_-]*api[_-]?key[a-zA-Z0-9_-]*\s*[:=]\s*['\"][a-zA-Z0-9_-]{20,}['\"]?
          
          # Database URLs
          (mongodb|mongodb\+srv)://[^\s]+
          
          # JWT Tokens
          eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*
          
          # Private Keys
          -----BEGIN[\s\w]*PRIVATE KEY-----
          
          # AWS Keys
          AKIA[0-9A-Z]{16}
          
          # Stripe Keys
          sk_live_[a-zA-Z0-9]{24,}
          pk_live_[a-zA-Z0-9]{24,}
          
          # GitHub Tokens
          ghp_[a-zA-Z0-9]{36}
          gho_[a-zA-Z0-9]{36}
          ghu_[a-zA-Z0-9]{36}
          ghs_[a-zA-Z0-9]{36}
          ghr_[a-zA-Z0-9]{36}
          EOF
          
          # Scan with custom patterns
          echo "Scanning with custom patterns..." > custom-secrets-report.txt
          while IFS= read -r pattern; do
            if [[ ! "$pattern" =~ ^#.*$ ]] && [[ -n "$pattern" ]]; then
              echo "Checking pattern: $pattern" >> custom-secrets-report.txt
              if grep -r -E "$pattern" --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --include="*.yaml" --include="*.yml" --exclude-dir=node_modules --exclude-dir=.git . 2>/dev/null; then
                echo "⚠️ Potential secret found with pattern: $pattern" >> custom-secrets-report.txt
              fi
            fi
          done < custom-secret-patterns.txt
          
          cat custom-secrets-report.txt
          
      - name: Environment file security check
        run: |
          echo "🔒 Checking environment files for security issues..."
          
          # Check for .env files that might be committed
          find . -name ".env*" -not -path "./node_modules/*" -not -path "./.git/*" > env-files-found.txt
          
          if [ -s env-files-found.txt ]; then
            echo "⚠️ Environment files found in repository:"
            cat env-files-found.txt
            echo "These files should be in .gitignore and not committed to version control."
          else
            echo "✅ No environment files found in repository"
          fi
          
      - name: Generate secrets scan summary
        run: |
          echo "📊 Secrets Scan Summary" > secrets-scan-summary.md
          echo "======================" >> secrets-scan-summary.md
          echo "" >> secrets-scan-summary.md
          
          # Gitleaks results
          if [ -f "gitleaks-current-report.json" ]; then
            echo "## Gitleaks Current Files Scan" >> secrets-scan-summary.md
            python -c "
          import json
          try:
              with open('gitleaks-current-report.json') as f:
                  data = json.load(f)
                  if isinstance(data, list):
                      print(f'- Potential secrets found: {len(data)}')
                  else:
                      print('- Gitleaks current scan completed')
          except:
              print('- Gitleaks current scan completed')
          " >> secrets-scan-summary.md
            echo "" >> secrets-scan-summary.md
          fi
          
          if [ -f "gitleaks-history-report.json" ]; then
            echo "## Gitleaks Git History Scan" >> secrets-scan-summary.md
            python -c "
          import json
          try:
              with open('gitleaks-history-report.json') as f:
                  data = json.load(f)
                  if isinstance(data, list):
                      print(f'- Potential secrets in history: {len(data)}')
                  else:
                      print('- Gitleaks history scan completed')
          except:
              print('- Gitleaks history scan completed')
          " >> secrets-scan-summary.md
            echo "" >> secrets-scan-summary.md
          fi
          
          # Custom patterns
          if [ -f "custom-secrets-report.txt" ]; then
            echo "## Custom Secret Patterns" >> secrets-scan-summary.md
            echo "- Custom pattern scan completed" >> secrets-scan-summary.md
            echo "" >> secrets-scan-summary.md
          fi
          
          # Environment files
          if [ -f "env-files-found.txt" ]; then
            echo "## Environment Files Check" >> secrets-scan-summary.md
            if [ -s "env-files-found.txt" ]; then
              echo "- ⚠️ Environment files found in repository" >> secrets-scan-summary.md
            else
              echo "- ✅ No environment files found in repository" >> secrets-scan-summary.md
            fi
          fi
          
          cat secrets-scan-summary.md
          
      - name: Upload secrets scan reports
        uses: actions/upload-artifact@v3
        with:
          name: secrets-scan-reports
          path: |
            gitleaks-current-report.json
            gitleaks-current-report.sarif
            gitleaks-history-report.json
            custom-secrets-report.txt
            env-files-found.txt
            secrets-scan-summary.md
          retention-days: 30

  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan]
    if: always()
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v3
        
      - name: Generate comprehensive security report
        run: |
          echo "# 🔒 RemoteHive Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          # Include individual summaries if they exist
          if [ -f "dependency-scan-reports/dependency-scan-summary.md" ]; then
            echo "## Dependency Security" >> security-report.md
            tail -n +3 dependency-scan-reports/dependency-scan-summary.md >> security-report.md
            echo "" >> security-report.md
          fi
          
          if [ -f "code-security-reports/code-security-summary.md" ]; then
            echo "## Code Security" >> security-report.md
            tail -n +3 code-security-reports/code-security-summary.md >> security-report.md
            echo "" >> security-report.md
          fi
          
          if [ -f "secrets-scan-reports/secrets-scan-summary.md" ]; then
            echo "## Secrets Security" >> security-report.md
            tail -n +3 secrets-scan-reports/secrets-scan-summary.md >> security-report.md
            echo "" >> security-report.md
          fi
          
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "1. **Dependencies**: Regularly update dependencies to patch known vulnerabilities" >> security-report.md
          echo "2. **Code Security**: Address any high-severity security patterns found" >> security-report.md
          echo "3. **Secrets**: Ensure no secrets are committed to version control" >> security-report.md
          echo "4. **Environment**: Use proper environment variable management" >> security-report.md
          echo "5. **Monitoring**: Set up continuous security monitoring" >> security-report.md
          echo "" >> security-report.md
          echo "---" >> security-report.md
          echo "*This report was automatically generated by RemoteHive Security Scan workflow*" >> security-report.md
          
          cat security-report.md
          
      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-security-report
          path: security-report.md
          retention-days: 90
          
      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = fs.readFileSync('security-report.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Security Scan Results\n\n${report}\n\n**Note:** Detailed security reports are available in the workflow artifacts.`
              });
            } catch (error) {
              console.log('Could not read security report file:', error.message);
            }