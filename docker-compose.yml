version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: remotehive-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: remotehive
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - remotehive-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: remotehive-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - remotehive-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes --requirepass redis123

  # Main Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: remotehive-backend
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/remotehive?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379/0
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - remotehive-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Autoscraper Service
  autoscraper:
    build:
      context: ./autoscraper-service
      dockerfile: Dockerfile
    container_name: remotehive-autoscraper
    restart: unless-stopped
    environment:
      - DATABASE_URL=sqlite:///app/data/autoscraper.db
      - REDIS_URL=redis://:redis123@redis:6379/1
      - BACKEND_API_URL=http://backend:8000
      - LOG_LEVEL=INFO
      - SCRAPER_CONCURRENT_JOBS=5
      - SCRAPER_DELAY_BETWEEN_REQUESTS=2
    ports:
      - "8001:8001"
    volumes:
      - ./autoscraper-service/data:/app/data
      - ./autoscraper-service/logs:/app/logs
      - ./autoscraper-service/scraped_data:/app/scraped_data
    networks:
      - remotehive-network
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin Panel
  admin:
    build:
      context: ./remotehive-admin
      dockerfile: Dockerfile
    container_name: remotehive-admin
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_AUTOSCRAPER_URL=http://localhost:8001
      - NODE_ENV=production
      - NEXTAUTH_SECRET=your-nextauth-secret-change-in-production
      - NEXTAUTH_URL=http://localhost:3000
    ports:
      - "3000:3000"
    networks:
      - remotehive-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Public Website
  public:
    build:
      context: ./remotehive-public
      dockerfile: Dockerfile
    container_name: remotehive-public
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_APP_ENV=production
    ports:
      - "5173:5173"
    networks:
      - remotehive-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: remotehive-celery-worker
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/remotehive?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis123@redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - remotehive-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4
    healthcheck:
      test: ["CMD", "celery", "-A", "app.tasks.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: remotehive-celery-beat
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/remotehive?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis123@redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - remotehive-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app beat --loglevel=info
    healthcheck:
      test: ["CMD", "test", "-f", "/app/celerybeat-schedule"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: remotehive-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - remotehive-network
    depends_on:
      - backend
      - admin
      - public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  remotehive-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16