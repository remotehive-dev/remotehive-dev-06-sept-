apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: remotehive-monitoring
  labels:
    app: alertmanager
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@remotehive.in'
      smtp_auth_username: 'alerts@remotehive.in'
      smtp_auth_password: 'your-app-password'
      slack_api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
      pagerduty_url: 'https://events.pagerduty.com/v2/enqueue'
    
    templates:
      - '/etc/alertmanager/templates/*.tmpl'
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
        group_wait: 5s
        repeat_interval: 30m
      - match:
          severity: warning
        receiver: 'warning-alerts'
        group_wait: 10s
        repeat_interval: 1h
      - match:
          alertname: 'InstanceDown'
        receiver: 'instance-down'
        group_wait: 5s
        repeat_interval: 15m
      - match:
          service: 'remotehive-backend'
        receiver: 'backend-alerts'
      - match:
          service: 'remotehive-autoscraper'
        receiver: 'autoscraper-alerts'
      - match:
          service: 'remotehive-admin'
        receiver: 'admin-alerts'
      - match:
          service: 'remotehive-public'
        receiver: 'public-alerts'
    
    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'cluster', 'service']
    - source_match:
        alertname: 'InstanceDown'
      target_match_re:
        alertname: '.*'
      equal: ['instance']
    
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://webhook-service:9093/webhook'
        send_resolved: true
    
    - name: 'critical-alerts'
      email_configs:
      - to: 'admin@remotehive.in'
        subject: '[CRITICAL] RemoteHive Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          Severity: {{ .Labels.severity }}
          {{ end }}
      slack_configs:
      - channel: '#alerts-critical'
        title: 'Critical Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Service:* {{ .Labels.service }}
          *Instance:* {{ .Labels.instance }}
          *Severity:* {{ .Labels.severity }}
          {{ end }}
        send_resolved: true
      pagerduty_configs:
      - routing_key: 'your-pagerduty-integration-key'
        description: '{{ .GroupLabels.alertname }} - {{ .GroupLabels.service }}'
    
    - name: 'warning-alerts'
      email_configs:
      - to: 'devops@remotehive.in'
        subject: '[WARNING] RemoteHive Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          {{ end }}
      slack_configs:
      - channel: '#alerts-warning'
        title: 'Warning Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Service:* {{ .Labels.service }}
          *Instance:* {{ .Labels.instance }}
          {{ end }}
    
    - name: 'instance-down'
      email_configs:
      - to: 'admin@remotehive.in'
        subject: '[URGENT] Instance Down: {{ .GroupLabels.instance }}'
        body: |
          Instance {{ .GroupLabels.instance }} is down!
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}
      slack_configs:
      - channel: '#alerts-critical'
        title: 'Instance Down: {{ .GroupLabels.instance }}'
        text: 'Instance {{ .GroupLabels.instance }} is down!'
        send_resolved: true
    
    - name: 'backend-alerts'
      email_configs:
      - to: 'backend-team@remotehive.in'
        subject: '[Backend] RemoteHive Alert: {{ .GroupLabels.alertname }}'
      slack_configs:
      - channel: '#backend-alerts'
        title: 'Backend Alert: {{ .GroupLabels.alertname }}'
    
    - name: 'autoscraper-alerts'
      email_configs:
      - to: 'scraper-team@remotehive.in'
        subject: '[Autoscraper] RemoteHive Alert: {{ .GroupLabels.alertname }}'
      slack_configs:
      - channel: '#scraper-alerts'
        title: 'Autoscraper Alert: {{ .GroupLabels.alertname }}'
    
    - name: 'admin-alerts'
      email_configs:
      - to: 'admin-team@remotehive.in'
        subject: '[Admin Panel] RemoteHive Alert: {{ .GroupLabels.alertname }}'
      slack_configs:
      - channel: '#admin-alerts'
        title: 'Admin Panel Alert: {{ .GroupLabels.alertname }}'
    
    - name: 'public-alerts'
      email_configs:
      - to: 'frontend-team@remotehive.in'
        subject: '[Public Website] RemoteHive Alert: {{ .GroupLabels.alertname }}'
      slack_configs:
      - channel: '#frontend-alerts'
        title: 'Public Website Alert: {{ .GroupLabels.alertname }}'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-templates
  namespace: remotehive-monitoring
  labels:
    app: alertmanager
data:
  default.tmpl: |
    {{ define "__subject" }}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join " " }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join " " }}{{ end }}){{ end }}{{ end }}
    
    {{ define "__description" }}{{ end }}
    
    {{ define "__text_alert_list" }}{{ range . }}Labels:
    {{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}
    {{ end }}Annotations:
    {{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}
    {{ end }}Source: {{ .GeneratorURL }}
    {{ end }}{{ end }}
    
    {{ define "slack.default.title" }}{{ template "__subject" . }}{{ end }}
    {{ define "slack.default.username" }}AlertManager{{ end }}
    {{ define "slack.default.fallback" }}{{ template "slack.default.title" . }} | {{ template "slack.default.titlelink" . }}{{ end }}
    {{ define "slack.default.pretext" }}{{ end }}
    {{ define "slack.default.titlelink" }}{{ template "__alertmanagerURL" . }}{{ end }}
    {{ define "slack.default.iconemoji" }}{{ end }}
    {{ define "slack.default.iconurl" }}{{ end }}
    {{ define "slack.default.text" }}{{ end }}
    
    {{ define "pagerduty.default.description" }}{{ template "__subject" . }}{{ end }}
    {{ define "pagerduty.default.client" }}{{ template "__alertmanager" . }}{{ end }}
    {{ define "pagerduty.default.clientURL" }}{{ template "__alertmanagerURL" . }}{{ end }}
    {{ define "pagerduty.default.instances" }}{{ template "__text_alert_list" . }}{{ end }}
    
    {{ define "opsgenie.default.message" }}{{ template "__subject" . }}{{ end }}
    {{ define "opsgenie.default.description" }}{{ .CommonAnnotations.SortedPairs.Values | join " " }}
    {{ if gt (len .Alerts.Firing) 0 -}}
    Alerts Firing:
    {{ template "__text_alert_list" .Alerts.Firing }}
    {{- end }}
    {{ if gt (len .Alerts.Resolved) 0 -}}
    Alerts Resolved:
    {{ template "__text_alert_list" .Alerts.Resolved }}
    {{- end }}
    {{ end }}
    {{ define "opsgenie.default.source" }}{{ template "__alertmanagerURL" . }}{{ end }}
    
    {{ define "victorops.default.message" }}{{ template "__subject" . }} | {{ template "__alertmanagerURL" . }}{{ end }}
    {{ define "victorops.default.from" }}{{ template "__alertmanager" . }}{{ end }}
    
    {{ define "email.default.subject" }}{{ template "__subject" . }}{{ end }}
    {{ define "email.default.html" }}
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>{{ template "__subject" . }}</title>
    <style>
    * {
      margin: 0;
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      box-sizing: border-box;
      font-size: 14px;
    }
    
    img {
      max-width: 100%;
    }
    
    body {
      -webkit-font-smoothing: antialiased;
      -webkit-text-size-adjust: none;
      width: 100% !important;
      height: 100%;
      line-height: 1.6em;
      background-color: #f6f6f6;
    }
    
    table td {
      vertical-align: top;
    }
    
    body {
      background-color: #f6f6f6;
    }
    
    .body-wrap {
      background-color: #f6f6f6;
      width: 100%;
    }
    
    .container {
      display: block !important;
      max-width: 600px !important;
      margin: 0 auto !important;
      clear: both !important;
    }
    
    .content {
      max-width: 600px;
      margin: 0 auto;
      display: block;
      padding: 20px;
    }
    
    .main {
      background-color: #fff;
      border: 1px solid #e9e9e9;
      border-radius: 3px;
    }
    
    .content-wrap {
      padding: 20px;
    }
    
    .content-block {
      padding: 0 0 20px;
    }
    
    .header {
      width: 100%;
      margin-bottom: 20px;
    }
    
    .footer {
      width: 100%;
      clear: both;
      color: #999;
      padding: 20px;
    }
    .footer p, .footer a, .footer td {
      color: #999;
      font-size: 12px;
    }
    
    h1, h2, h3 {
      font-family: "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
      color: #000;
      margin: 40px 0 0;
      line-height: 1.2em;
      font-weight: 400;
    }
    
    h1 {
      font-size: 32px;
      font-weight: 500;
      margin-top: 0;
    }
    
    h2 {
      font-size: 24px;
    }
    
    h3 {
      font-size: 18px;
    }
    
    h4 {
      font-size: 14px;
      font-weight: 600;
    }
    
    p, ul, ol {
      margin-bottom: 10px;
      font-weight: normal;
    }
    p li, ul li, ol li {
      margin-left: 5px;
      list-style-position: inside;
    }
    
    a {
      color: #1ab394;
      text-decoration: underline;
    }
    
    .btn-primary {
      text-decoration: none;
      color: #FFF;
      background-color: #1ab394;
      border: solid #1ab394;
      border-width: 5px 10px;
      line-height: 2em;
      font-weight: bold;
      text-align: center;
      cursor: pointer;
      display: inline-block;
      border-radius: 5px;
      text-transform: capitalize;
    }
    
    .last {
      margin-bottom: 0;
    }
    
    .first {
      margin-top: 0;
    }
    
    .aligncenter {
      text-align: center;
    }
    
    .alignright {
      text-align: right;
    }
    
    .alignleft {
      text-align: left;
    }
    
    .clear {
      clear: both;
    }
    
    .alert {
      font-size: 16px;
      color: #fff;
      font-weight: 500;
      padding: 20px;
      text-align: center;
      border-radius: 3px 3px 0 0;
    }
    .alert.alert-warning {
      background-color: #FF9F00;
    }
    .alert.alert-bad {
      background-color: #D0021B;
    }
    .alert.alert-good {
      background-color: #68B90F;
    }
    
    @media only screen and (max-width: 640px) {
      body {
        padding: 0 !important;
      }
    
      h1, h2, h3, h4 {
        font-weight: 800 !important;
        margin: 20px 0 5px !important;
      }
    
      h1 {
        font-size: 22px !important;
      }
    
      h2 {
        font-size: 18px !important;
      }
    
      h3 {
        font-size: 16px !important;
      }
    
      .container {
        padding: 0 !important;
        width: 100% !important;
      }
    
      .content {
        padding: 0 !important;
      }
    
      .content-wrap {
        padding: 10px !important;
      }
    
      .invoice {
        width: 100% !important;
      }
    }
    </style>
    </head>
    
    <body itemscope itemtype="http://schema.org/EmailMessage">
    
    <table class="body-wrap">
      <tr>
        <td></td>
        <td class="container" width="600">
          <div class="content">
            <table class="main" width="100%" cellpadding="0" cellspacing="0">
              <tr>
                {{ if gt (len .Alerts.Firing) 0 }}
                <td class="alert alert-bad">
                {{ else }}
                <td class="alert alert-good">
                {{ end }}
                  {{ .Alerts | len }} alert{{ if gt (len .Alerts) 1 }}s{{ end }} for {{ range .GroupLabels.SortedPairs }}
                    {{ .Name }}={{ .Value }}
                  {{ end }}
                </td>
              </tr>
              <tr>
                <td class="content-wrap">
                  <table width="100%" cellpadding="0" cellspacing="0">
                    <tr>
                      <td class="content-block">
                        <h1>RemoteHive Alert Notification</h1>
                      </td>
                    </tr>
                    {{ range .Alerts }}
                    <tr>
                      <td class="content-block">
                        <h2>{{ .Annotations.summary }}</h2>
                        {{ if .Annotations.description }}
                        <p>{{ .Annotations.description }}</p>
                        {{ end }}
                        <table width="100%">
                          <tr>
                            <td><strong>Status:</strong></td>
                            <td>{{ .Status }}</td>
                          </tr>
                          {{ range .Labels.SortedPairs }}
                          <tr>
                            <td><strong>{{ .Name }}:</strong></td>
                            <td>{{ .Value }}</td>
                          </tr>
                          {{ end }}
                        </table>
                      </td>
                    </tr>
                    {{ end }}
                    <tr>
                      <td class="content-block">
                        <a href="{{ template "__alertmanagerURL" . }}" class="btn-primary">View in AlertManager</a>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
            <div class="footer">
              <table width="100%">
                <tr>
                  <td class="aligncenter content-block">RemoteHive Monitoring System</td>
                </tr>
              </table>
            </div>
          </div>
        </td>
        <td></td>
      </tr>
    </table>
    
    </body>
    </html>
    {{ end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: remotehive-monitoring
  labels:
    app: alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager'
          - '--web.external-url=http://localhost:9093'
          - '--web.route-prefix=/'
          - '--cluster.listen-address=0.0.0.0:9094'
          - '--log.level=info'
        ports:
        - containerPort: 9093
          name: http
        - containerPort: 9094
          name: cluster
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/alertmanager
        - name: templates-volume
          mountPath: /etc/alertmanager/templates
        - name: storage-volume
          mountPath: /alertmanager
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: config-volume
        configMap:
          name: alertmanager-config
      - name: templates-volume
        configMap:
          name: alertmanager-templates
      - name: storage-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: remotehive-monitoring
  labels:
    app: alertmanager
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9093'
spec:
  type: ClusterIP
  ports:
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: http
  - port: 9094
    targetPort: 9094
    protocol: TCP
    name: cluster
  selector:
    app: alertmanager