# Backend API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: remotehive
  labels:
    app: backend-api
    tier: backend
    version: "1.0"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: backend-api
      tier: backend
  template:
    metadata:
      labels:
        app: backend-api
        tier: backend
        version: "1.0"
    spec:
      initContainers:
      # MongoDB init container removed - using MongoDB Atlas
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z redis 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
      containers:
      - name: backend-api
        image: remotehive-api:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: remotehive-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: remotehive-config
              key: LOG_LEVEL
        - name: MONGODB_URL
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGODB_URL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGODB_URL
        - name: MONGODB_DATABASE_NAME
          value: "remotehive_main"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_URL
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: remotehive-secrets
              key: JWT_SECRET_KEY
        - name: ENABLE_FILE_LOGGING
          value: "false"
        - name: ERROR_TRACKING_ENABLED
          value: "false"
        - name: JWT_ALGORITHM
          valueFrom:
            configMapKeyRef:
              name: remotehive-config
              key: JWT_ALGORITHM
        - name: JWT_ACCESS_TOKEN_EXPIRE_MINUTES
          valueFrom:
            configMapKeyRef:
              name: remotehive-config
              key: JWT_ACCESS_TOKEN_EXPIRE_MINUTES
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: remotehive-config
              key: CORS_ORIGINS
        - name: API_V1_STR
          valueFrom:
            configMapKeyRef:
              name: remotehive-config
              key: API_V1_STR
        - name: SMTP_USERNAME
          valueFrom:
            secretKeyRef:
              name: remotehive-secrets
              key: SMTP_USERNAME
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: remotehive-secrets
              key: SMTP_PASSWORD
        - name: SMTP_PORT
          valueFrom:
            configMapKeyRef:
              name: remotehive-config
              key: SMTP_PORT
        - name: CLERK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: remotehive-secrets
              key: CLERK_SECRET_KEY
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: logs-pvc
      - name: uploads
        persistentVolumeClaim:
          claimName: uploads-pvc
      restartPolicy: Always
---
# Backend API Service
apiVersion: v1
kind: Service
metadata:
  name: backend-api
  namespace: remotehive
  labels:
    app: backend-api
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: backend-api
    tier: backend
---
# Backend API Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-api-hpa
  namespace: remotehive
  labels:
    app: backend-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# Backend API Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-api-pdb
  namespace: remotehive
  labels:
    app: backend-api
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: backend-api
      tier: backend