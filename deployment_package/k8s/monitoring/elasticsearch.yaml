apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: remotehive-monitoring
  labels:
    app: elasticsearch
data:
  elasticsearch.yml: |
    cluster.name: remotehive-logs
    node.name: ${HOSTNAME}
    node.roles: [master, data, ingest]
    
    # Network settings
    network.host: 0.0.0.0
    http.port: 9200
    transport.port: 9300
    
    # Discovery settings
    discovery.type: single-node
    
    # Security settings
    xpack.security.enabled: false
    xpack.monitoring.collection.enabled: true
    
    # Index settings
    action.auto_create_index: "+logstash-*,+filebeat-*,+remotehive-*,-*"
    
    # Memory settings
    bootstrap.memory_lock: false
    
    # Path settings
    path.data: /usr/share/elasticsearch/data
    path.logs: /usr/share/elasticsearch/logs
    
    # Logging
    logger.org.elasticsearch.discovery: DEBUG
    
    # Index lifecycle management
    xpack.ilm.enabled: true
  
  jvm.options: |
    # Xms represents the initial size of total heap space
    # Xmx represents the maximum size of total heap space
    -Xms1g
    -Xmx1g
    
    # Expert settings
    -XX:+UnlockExperimentalVMOptions
    -XX:+UseCGroupMemoryLimitForHeap
    -XX:MaxRAMFraction=1
    -XX:+AlwaysPreTouch
    -Xss1m
    -Djava.awt.headless=true
    -Dfile.encoding=UTF-8
    -Djna.nosys=true
    -XX:-OmitStackTraceInFastThrow
    -Dio.netty.noUnsafe=true
    -Dio.netty.noKeySetOptimization=true
    -Dio.netty.recycler.maxCapacityPerThread=0
    -Dlog4j.shutdownHookEnabled=false
    -Dlog4j2.disable.jmx=true
    
    # GC configuration
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32m
    -XX:+UseG1MixedGCCountTarget=8
    -XX:+UseStringDeduplication
    
    # JVM temporary directory
    -Djava.io.tmpdir=${ES_TMPDIR}
    
    # Heap dumps
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:HeapDumpPath=data
    
    # Error file
    -XX:ErrorFile=logs/hs_err_pid%p.log
    
    # GC logging
    -Xlog:gc*,gc+age=trace,safepoint:gc.log:utctime,pid,tid,level
    -Xlog:gc+heap=debug:gc.log:utctime,pid,tid,level
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-index-templates
  namespace: remotehive-monitoring
  labels:
    app: elasticsearch
data:
  remotehive-logs-template.json: |
    {
      "index_patterns": ["remotehive-*", "logstash-*", "filebeat-*"],
      "template": {
        "settings": {
          "number_of_shards": 1,
          "number_of_replicas": 0,
          "index.refresh_interval": "5s",
          "index.codec": "best_compression",
          "index.mapping.total_fields.limit": 2000,
          "index.max_result_window": 50000,
          "index.lifecycle": {
            "name": "remotehive-logs-policy",
            "rollover_alias": "remotehive-logs"
          },
          "analysis": {
            "analyzer": {
              "message_analyzer": {
                "type": "custom",
                "tokenizer": "standard",
                "filter": ["lowercase", "stop"]
              },
              "path_analyzer": {
                "type": "custom",
                "tokenizer": "path_hierarchy"
              }
            }
          }
        },
        "mappings": {
          "dynamic_templates": [
            {
              "message_fields": {
                "path_match": "message",
                "match_mapping_type": "string",
                "mapping": {
                  "type": "text",
                  "analyzer": "message_analyzer",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            {
              "string_fields": {
                "match": "*",
                "match_mapping_type": "string",
                "mapping": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            }
          ],
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "keyword"
            },
            "level": {
              "type": "keyword"
            },
            "logger": {
              "type": "keyword"
            },
            "service": {
              "type": "keyword"
            },
            "environment": {
              "type": "keyword"
            },
            "host": {
              "properties": {
                "name": {
                  "type": "keyword"
                },
                "ip": {
                  "type": "ip"
                }
              }
            },
            "http": {
              "properties": {
                "method": {
                  "type": "keyword"
                },
                "status_code": {
                  "type": "integer"
                },
                "url": {
                  "type": "text",
                  "analyzer": "path_analyzer",
                  "fields": {
                    "keyword": {
                      "type": "keyword"
                    }
                  }
                },
                "user_agent": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "response_time": {
                  "type": "float"
                }
              }
            },
            "geoip": {
              "properties": {
                "location": {
                  "type": "geo_point"
                },
                "country_name": {
                  "type": "keyword"
                },
                "city_name": {
                  "type": "keyword"
                }
              }
            },
            "container": {
              "properties": {
                "name": {
                  "type": "keyword"
                },
                "id": {
                  "type": "keyword"
                },
                "image": {
                  "type": "keyword"
                }
              }
            },
            "kubernetes": {
              "properties": {
                "pod": {
                  "properties": {
                    "name": {
                      "type": "keyword"
                    },
                    "namespace": {
                      "type": "keyword"
                    }
                  }
                },
                "container": {
                  "properties": {
                    "name": {
                      "type": "keyword"
                    }
                  }
                },
                "node": {
                  "properties": {
                    "name": {
                      "type": "keyword"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "priority": 100,
      "version": 1,
      "_meta": {
        "description": "Template for RemoteHive application logs"
      }
    }
  
  ilm-policy.json: |
    {
      "policy": {
        "phases": {
          "hot": {
            "actions": {
              "rollover": {
                "max_size": "5GB",
                "max_age": "1d",
                "max_docs": 1000000
              },
              "set_priority": {
                "priority": 100
              }
            }
          },
          "warm": {
            "min_age": "2d",
            "actions": {
              "set_priority": {
                "priority": 50
              },
              "allocate": {
                "number_of_replicas": 0
              },
              "forcemerge": {
                "max_num_segments": 1
              }
            }
          },
          "cold": {
            "min_age": "7d",
            "actions": {
              "set_priority": {
                "priority": 0
              },
              "allocate": {
                "number_of_replicas": 0
              }
            }
          },
          "delete": {
            "min_age": "30d",
            "actions": {
              "delete": {}
            }
          }
        }
      }
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-data
  namespace: remotehive-monitoring
  labels:
    app: elasticsearch
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: remotehive-monitoring
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      initContainers:
      - name: increase-vm-max-map
        image: busybox:1.35
        command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
        securityContext:
          privileged: true
      - name: increase-fd-ulimit
        image: busybox:1.35
        command: ['sh', '-c', 'ulimit -n 65536']
        securityContext:
          privileged: true
      - name: fix-permissions
        image: busybox:1.35
        command: ['sh', '-c', 'chown -R 1000:1000 /usr/share/elasticsearch/data']
        securityContext:
          privileged: true
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
        - name: CLUSTER_NAME
          value: "remotehive-logs"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        - name: ELASTIC_PASSWORD
          value: "changeme"
        - name: xpack.security.enabled
          value: "false"
        - name: discovery.type
          value: "single-node"
        - name: ES_TMPDIR
          value: "/tmp"
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2
            memory: 4Gi
        volumeMounts:
        - name: config
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: config
          mountPath: /usr/share/elasticsearch/config/jvm.options
          subPath: jvm.options
        - name: data
          mountPath: /usr/share/elasticsearch/data
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 90
          timeoutSeconds: 30
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /_cluster/health?wait_for_status=yellow&timeout=5s
            port: 9200
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 30
      volumes:
      - name: config
        configMap:
          name: elasticsearch-config
      - name: data
        persistentVolumeClaim:
          claimName: elasticsearch-data
      - name: tmp
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: remotehive-monitoring
  labels:
    app: elasticsearch
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9200'
    prometheus.io/path: '/_prometheus/metrics'
spec:
  type: ClusterIP
  ports:
  - port: 9200
    targetPort: 9200
    protocol: TCP
    name: http
  - port: 9300
    targetPort: 9300
    protocol: TCP
    name: transport
  selector:
    app: elasticsearch
---
apiVersion: batch/v1
kind: Job
metadata:
  name: elasticsearch-setup
  namespace: remotehive-monitoring
  labels:
    app: elasticsearch-setup
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: setup
        image: curlimages/curl:8.4.0
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Waiting for Elasticsearch to be ready..."
          until curl -s "http://elasticsearch:9200/_cluster/health" > /dev/null; do
            echo "Waiting for Elasticsearch..."
            sleep 10
          done
          
          echo "Elasticsearch is ready. Setting up index templates and policies..."
          
          # Create ILM policy
          echo "Creating ILM policy..."
          curl -X PUT "http://elasticsearch:9200/_ilm/policy/remotehive-logs-policy" \
            -H "Content-Type: application/json" \
            -d @/config/ilm-policy.json
          
          # Create index template
          echo "Creating index template..."
          curl -X PUT "http://elasticsearch:9200/_index_template/remotehive-logs-template" \
            -H "Content-Type: application/json" \
            -d @/config/remotehive-logs-template.json
          
          # Create initial index
          echo "Creating initial index..."
          curl -X PUT "http://elasticsearch:9200/remotehive-logs-000001" \
            -H "Content-Type: application/json" \
            -d '{
              "aliases": {
                "remotehive-logs": {
                  "is_write_index": true
                }
              }
            }'
          
          echo "Setup completed successfully!"
        volumeMounts:
        - name: templates
          mountPath: /config
      volumes:
      - name: templates
        configMap:
          name: elasticsearch-index-templates